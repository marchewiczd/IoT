@page "/modsprinkler/{SprinklerId}"

@using Data;
@using Services;

@inject DialogService dialogService
@inject NotificationService notificationService
@inject SprinklerService sprinklerService
@inject IStringLocalizer<ModSprinkleDialog> L


<RadzenCard Style="margin-bottom: 20px; height: 375px;">
    <div class="row" style="height:85%">
        <div class="col-md-6">
            <div>@L["Desc"]</div>
            <b>@sprinkler.Description</b>
            <br />
            <br />
            <div>@L["GpioPin"]</div>
            <b>@sprinkler.GpioPin</b>
            <br />
            <br />
            <div>@L["Time"]</div>
            <RadzenDatePicker @bind-Value="sprinkleTime" TValue="DateTime" ShowTime="true" TimeOnly="true" ShowSeconds="true" DateFormat="HH:mm:ss" Change="@(args => Change())" />
            <div>@L["Duration"]</div>
            <RadzenNumeric @bind-Value="sprinkleLength" TValue="uint" Max="60" Min="1" Step="5" Style="margin-bottom: 20px" Change="@(args => Change())" />
            <!-- buttons -->
            <RadzenButton Click="@(args => Add())" Text="@L["Add"]" Style="margin-top: 20px; width: 125px" />
            <RadzenButton ButtonStyle="ButtonStyle.Warning" Click="@(args => DeleteSelected())" Text="@L["Del"]" Style="margin-top: 20px; width: 125px" />
        </div>
        <div class="col-md-6">
            @if (sprinkler.SprinkleTimeList.Any())
            {
                <RadzenGrid RowSelect="@((args) => ChangeSelectedRow(args))" AllowFiltering="false" AllowPaging="false" AllowSorting="false" Data="@sprinkler.SprinkleTimeList" TItem="SprinklerDateTime" Style="margin-bottom: 20px;height:100%;width:100%;">
                    <Columns>
                        <RadzenGridColumn Width="70px" TItem="SprinklerDateTime" Property="ParsedDateTime" Title="@L["Time"]" />
                        <RadzenGridColumn Width="150px" TItem="SprinklerDateTime" Property="WateringDuration" Title="@L["Duration"]" />
                    </Columns>
                </RadzenGrid>
            }
            else
            {
                <b style="color:red">@L["NoSprinkles"]</b>
            }
        </div>
    </div>
</RadzenCard>
<div class="row">
    <div class="col-md-12">
        <RadzenButton Click="@((args) => dialogService.Close(true))" Text="@L["Ok"]" Style="margin-bottom: 10px; width: 150px" />
    </div>
</div>

@code {
    [Parameter] public ulong SprinklerId { get; set; }

    int popupDurationMs = 10000;

    SprinklerData sprinkler;
    uint sprinkleLength;
    DateTime sprinkleTime;
    SprinklerDateTime selectedRow;

    protected override void OnInitialized()
    {
        sprinkler = sprinklerService.Sprinklers.Find(spr => spr.Id == SprinklerId);
    }

    void Change()
    {
        StateHasChanged();
    }

    void ChangeSelectedRow(SprinklerDateTime dateTime)
    {
        selectedRow = dateTime;
        StateHasChanged();
    }

    void DeleteSelected()
    {
        if (selectedRow == null)
        {
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = L["Warn"], Detail = L["DelEmpty"], Duration = popupDurationMs });
            return;
        }

        sprinklerService.DeleteSprinkleTime(sprinkler, selectedRow);
        selectedRow = null;
        sprinkler = sprinklerService.Sprinklers.Find(spr => spr.Id == SprinklerId);

        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = L["Success"], Detail = L["DelSuccess"], Duration = popupDurationMs });
        StateHasChanged();
    }

    void Add()
    {
        if (sprinkleLength != null
            && sprinkleLength > 1
            && sprinkleTime != null
            && sprinkleTime.Ticks > 0)
        {
            if (sprinkler.SprinkleTimeList.Find(x => x.ParsedDateTime == sprinkleTime.ToString("HH:mm:ss")) != null)
            {
                ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = L["Warn"], Detail = L["AlreadyExists"], Duration = popupDurationMs });
                return;
            }
            else
            {
                sprinklerService.AddSprinkleTime(sprinkler, (DateTime)sprinkleTime, (uint)sprinkleLength);
            }
        }
        else
        {
            ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = L["Error"], Detail = L["NoDura"], Duration = popupDurationMs });
            return;
        }

        ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = L["Success"], Detail = L["TimeAdded"], Duration = popupDurationMs });      
        sprinkler = sprinklerService.Sprinklers.Find(spr => spr.Id == SprinklerId);
        StateHasChanged();
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(() => { StateHasChanged(); });
    }
}
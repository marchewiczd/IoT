@page "/forecast"

@using System.Globalization
@using IoT_RaspberryServer.Services
@using IoT_RaspberryServer.Data

@inject WeatherForecastService ForecastService
@inject IStringLocalizer<Forecast> L

<h1>@L["Forecast"]</h1>
<hr />
<RadzenButton Disabled="@HourlyDisabled" Click="@((args) => GetHourlyForecast_Click())" Text="@L["Hourly"]" Style="margin-bottom: 20px; width: 150px" />
<RadzenButton Disabled="@DailyDisabled" Click="@((args) => GetDailyForecast_Click())" Text="@L["Daily"]" Style="margin-bottom: 20px; width: 150px" />

@if (forecasts == null)
{
    <div class="spinner" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@L["Date"]</th>
                <th>@L["Weather"]</th>
                <th>@L["Temp"]</th>
                <th>@L["FeelsLike"]</th>
                <th>@L["Humidity"]</th>
                <th>@L["Pressure"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToString("dd MMMM, HH:mm", CultureInfo.CurrentUICulture)</td>
                    <td><img src="@forecast.IconAddress" />@forecast.Weather</td>
                    <td>@forecast.Temp</td>
                    <td>@forecast.FeelsLikeTemp</td>
                    <td>@forecast.Humidity</td>
                    <td>@forecast.Pressure</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts;
    protected bool HourlyDisabled { get; set; } = true;
    protected bool DailyDisabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(GetWeatherData);
    }

    private void GetWeatherData()
    {
        forecasts = null;
        System.Threading.Thread.Sleep(100);
        forecasts = ForecastService.GetForecast();
    }

    private async void GetDailyForecast_Click()
    {
        forecasts = null;
        this.HourlyDisabled = false;
        this.DailyDisabled = true;

        await Task.Run(this.GetDailyForecast);
    }

    private async void GetHourlyForecast_Click()
    {
        forecasts = null;
        this.HourlyDisabled = true;
        this.DailyDisabled = false;

        await Task.Run(this.GetHourlyForecast);
    }

    private void GetDailyForecast()
    {
        System.Threading.Thread.Sleep(500);
        forecasts = ForecastService.GetDailyForecast();
        InvokeAsync(this.StateHasChanged);
    }

    private void GetHourlyForecast()
    {
        System.Threading.Thread.Sleep(500);
        forecasts = ForecastService.GetHourlyForecast();
        InvokeAsync(this.StateHasChanged);
    }
}

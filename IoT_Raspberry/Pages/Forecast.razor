@page "/forecast"

@using IoT_RaspberryServer.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>
<button disabled="@HourlyDisabled" class="btn btn-primary" @onclick="GetHourlyForecast_Click">Hourly</button>
<button disabled="@DailyDisabled" class="btn btn-primary" @onclick="GetDailyForecast_Click">Daily</button>

@if (forecasts == null)
{
    <div class="spinner" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Weather</th>
                <th>Temp. (C)</th>
                <th>Feels like Temp.</th>
                <th>Humidity</th>
                <th>Pressure</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToString("dd MMMM, HH:mm")</td>
                    <td><img src="@forecast.IconAddress" />@forecast.Weather</td>
                    <td>@forecast.Temp</td>
                    <td>@forecast.FeelsLikeTemp</td>
                    <td>@forecast.Humidity</td>
                    <td>@forecast.Pressure</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast> forecasts;
    protected bool HourlyDisabled { get; set; } = true;
    protected bool DailyDisabled { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(GetWeatherData);
    }

    private void GetWeatherData()
    {
        Console.WriteLine("Daily forecast...");
        forecasts = null;
        System.Threading.Thread.Sleep(100);
        forecasts = ForecastService.GetForecast();
        Console.WriteLine("Done!");
    }

    private async void GetDailyForecast_Click()
    {
        forecasts = null;
        this.HourlyDisabled = false;
        this.DailyDisabled = true;

        await Task.Run(this.GetDailyForecast);
    }

    private async void GetHourlyForecast_Click()
    {
        forecasts = null;
        this.HourlyDisabled = true;
        this.DailyDisabled = false;

        await Task.Run(this.GetHourlyForecast);
    }

    private void GetDailyForecast()
    {

        Console.WriteLine("Daily forecast...");
        System.Threading.Thread.Sleep(500);
        forecasts = ForecastService.GetDailyForecast();
        Console.WriteLine("Done!");
        InvokeAsync(this.StateHasChanged);
    }

    private void GetHourlyForecast()
    {

        Console.WriteLine("Hourly forecast...");
        System.Threading.Thread.Sleep(500);
        forecasts = ForecastService.GetHourlyForecast();
        Console.WriteLine("Done!");
        InvokeAsync(this.StateHasChanged);
    }
}

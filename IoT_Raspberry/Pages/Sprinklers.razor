@page "/sprinklers"

@using System.Diagnostics;

@using Data;
@using Services;

@inject DialogService dialogService
@inject SprinklerService sprinklerService 

    <div class="row">
        <RadzenButton Style="margin-top: 40px;" Text=@($"Dodaj/usun zraszacz") Click="@(args => dialogService.Open<Dialog.AddSprinkleDialog>($"Add new sprinkler", null, new DialogOptions(){ Width = "700px", Height = "370px" }))" />

        @if (Debugger.IsAttached)
        {
            <RadzenButton Style="margin-top: 40px; margin-left: 20px" Text=@($"Clear all saved sprinklers") Click="@(args => sprinklerService.ClearSprinklers())" />
        }
    </div>
<hr>
<div class="row">
    @foreach (var sprinkle in sprinklerService.Sprinklers)
    {
        <RadzenCard Style="width:48%;height:300px;margin-right:2%;margin-top:2%">
            <div class="row">
                <div class="col-md-6">
                    <div>Opis:</div>
                    <b>@sprinkle.Description</b>
                    <br />
                    <RadzenButton Style="margin-top: 40px;" Text=@($"Dodaj/usun podlewanie") Click="@(args => dialogService.Open<Dialog.ModSprinkleDialog>($"Sprinkler ID: {sprinkle.Id}",
                            new Dictionary<string, object>() { { "SprinklerId", sprinkle.Id } },
                            new DialogOptions(){ Width = "700px", Height = "550px" }))" />
                    <br />
                    <RadzenButton Click="@(args => 
                                           { 
                                                sprinklerService.ToggleSprinkler(@sprinkle);
                                                StateHasChanged();
<<<<<<< Updated upstream
                                           })" Text="On/off" Style="margin-top: 20px; width: 150px" />
                    <br />
                    <RadzenButton Icon="delete_forever" Click="@(args => DeleteSprinkler(@sprinkle))" ButtonStyle="ButtonStyle.Warning" Text="Usun" Style="margin-top: 20px; width: 150px" />
                </div>
                <div class="col-md-6">
                    @if (sprinkle.SprinkleTimeDict.Any())
                    {
                        <div>Nastepne podlewanie:</div>
                        <b>@($"{sprinkle.SprinkleTimeDict.First().Key:HH:mm:ss}")</b> <!-- TODO: fix to show actual next sprinkle -->
                        <div style="margin-top:20px">Czas nastepnego podlewania:</div>
                        <b>@($"{sprinkle.SprinkleTimeDict.First().Value} min")</b> <!-- TODO: fix to show actual next sprinkle -->
                        <div style="margin-top:20px">Ostatnie udane podlewanie:</div>
                        <b>@($"{sprinkle.LastSuccessfulSprinkle:HH:mm:ss}")</b>
                    }
                    else
                    {
                        <div>Nastepne podlewanie:</div>
                        <b style="color:red">No sprinkles defined</b>
                        <div style="margin-top:20px">Czas nastepnego podlewania:</div>
                        <b style="color:red">No sprinkles defined</b>
                        <div style="margin-top:20px">Ostatnie udane podlewanie:</div>
                        <b style="color:red">No sprinkles defined</b>
                    }

                    <div style="margin-top:20px">Status:</div>
                    <b style="@(sprinkle.SprinkleStatus ? "color:green" : "color:red")">@ParseStatus(sprinkle.SprinkleStatus)</b>
=======
                                           })" Text="@L["OnOff"]" Style="margin-top: 20px; width: 150px" />
                        <br />
                        <RadzenButton Icon="delete_forever" Click="@(args => DeleteSprinkler(@sprinkle))" ButtonStyle="ButtonStyle.Warning" Text="@L["Del"]" Style="margin-top: 20px; width: 150px" />
                    </div>
                    <div class="col-md-6">
                        @if (sprinkle.SprinkleTimeList.Any())
                        {
                            <div>@L["NextWater"]</div>
                            <b>@($"{sprinkle.SprinkleTimeList.First().ParsedDateTime}")</b> <!-- TODO: fix to show actual next sprinkle -->
                            <div style="margin-top:20px">@L["NextDuration"]</div>
                            <b>@($"{sprinkle.SprinkleTimeList.First().WateringDuration} min")</b> <!-- TODO: fix to show actual next sprinkle -->
                            <div style="margin-top:20px">@L["LastSuccessful"]</div>
                            <b>@($"{sprinkle.LastSuccessfulSprinkle:HH:mm:ss}")</b>
                        }
                        else
                        {
                            <div>@L["NextWater"]</div>
                            <b style="color:red">@L["NoWatering"]</b>
                            <div style="margin-top:20px">@L["NextDuration"]</div>
                            <b style="color:red">@L["NoWatering"]</b>
                            <div style="margin-top:20px">@L["LastSuccessful"]</div>
                            <b style="color:red">@L["NoWatering"]</b>
                        }

                        <div style="margin-top:20px">@L["Status"]</div>
                        <b style="@(sprinkle.SprinkleStatus ? "color:green" : "color:red")">@ParseStatus(sprinkle.SprinkleStatus)</b>
>>>>>>> Stashed changes

                </div>
            </div>
        </RadzenCard>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;

        if (Debugger.IsAttached && !sprinklerService.Sprinklers.Any())
        {
            foreach(var entry in Data.Sprinklers)
            {
                sprinklerService.AddSprinkler(entry);
            }
        }
    }

    string ParseStatus(bool sprinkleStatus)
    {
        return sprinkleStatus ? "On" : "Off";
    }

    async void DeleteSprinkler(Sprinkler sprinkler)
    {
        bool? result = await dialogService.Confirm("Are you sure?", "Delete", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (result == true)
        {
            sprinklerService.DeleteSprinkler(sprinkler);
            StateHasChanged();
        }
    }

    void Change(string text)
    {
        StateHasChanged();
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        StateHasChanged();
    }

    void Close(dynamic result)
    {
        StateHasChanged();
    }
}